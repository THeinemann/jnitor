apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'

group = 'com.github.theinemann.jnitor'
version = '0.0.1-SNAPSHOT'

description = """jnitor - C++ wrapper generator to access Java classes via JNI"""

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

String os;

if (System.properties['os.name'].toUpperCase().contains('WINDOWS')) {
	os = "win32"
} else {
	os = System.properties['java.os'].toLowerCase()
}

String javaHome = System.properties['java.home'] + "/.."

mainClassName = "com.github.theinemann.jnitor.Jnitor"

model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }

	components {
		integration(NativeLibrarySpec) {
			if (System.properties['java.home'] != 'amd64') {
				targetPlatform "x64"
			} else {
				targetPlatform "x86"
			}
		
			sources {
				cpp {
					// Integration test sources are created from the JUnit test.
					builtBy tasks.test
					source {			
						srcDir "build/generatedTestSources"
						include "**/*.cpp"
						
						
					}
					exportedHeaders {
		                srcDir "build/generatedTestSources"
		            }
	            }
            }
		}
	}
	
	testSuites {
		integrationTest(GoogleTestTestSuiteSpec) {	
			testing $.components.integration			
			
			sources {
				cpp {
					lib project: ':gtest', library: 'googleTest', linkage: 'static'
				}
			}
		}
	}
	
	binaries {
		all {
            if (toolChain in Gcc) {
            	cppCompiler.args "-I" + javaHome + "/include/", "-I" + javaHome+ "/include/linux"
            }
		}
	
		withType(GoogleTestTestSuiteBinarySpec) {
            if (toolChain in Gcc) {
            	String jniLibPath = javaHome + '/jre/lib/amd64/server'
            	
            	// Setting rpath in the linker argument is a bit hacky, but I deemed it acceptable,
            	// because we are only building a test binary that will not be distributed.
            	// TODO: If gradle supports setting the LD_LIBRARY_PATH for the linker, check if this is a better option
                linker.args '-L' + jniLibPath, '-ljvm', '-Wl,-rpath=' + jniLibPath
            }
			else if (toolChain in VisualCpp) {
				String jniLibPath = javaHome + '/lib'
				String jniDllPath = javaHome + '/jre/bin/server'
				
				linker.args '/LIBPATH:' + jniDllPath, jniLibPath + '/jvm.lib', jniLibPath + '/jawt.lib'
			}
		}
	}
}

tasks.withType(CppCompile) {
	includes javaHome + "/include/"
	includes javaHome + "/include/" + os
}
 
// Ensure tests are executed before the binaries are bundled to a jar library
tasks.jar {
	dependsOn check
}

tasks.run {
	args = ['-outputDirectory', 'build/generatedRun/']
}

repositories {
        
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.23'
    compile group: 'args4j', name: 'args4j', version:'2.33'
    testCompile group: 'junit', name: 'junit', version:'4.12'
}

// Add license and readme file to the distribution 
distributions {
	main {
		contents {
			from 'LICENSE', 'README'
		}
	}
}

jar {
  from 'LICENSE', 'README'
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': mainClassName
    )
  }
}